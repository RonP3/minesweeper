{"version":3,"sources":["globConstants/globConstants.js","components/Toolbar.jsx","components/Square.jsx","components/Board.jsx","Minesweeper.js","index.js"],"names":["icons","FLAG","BOMB","gameStatuses","INPROGRESS","WIN","LOSE","messages","initialBoardSettings","HEIGHT","WIDTH","MINES","GAMENUM","errorMessages","INVALID_DIMENSION","INVALID_MINES","maxBoardDimension","noFlags","remainingFlags","Toolbar","state","heightInput","widthInput","mineInput","isNumber","val","test","handleHeightChange","input","height","target","value","Number","setState","handlewidthChange","width","handleMinesChange","mines","className","placeholder","key","onChange","this","type","onClick","props","onBoardSettingsChange","Component","Square","getSquareValueAndClass","square","isExposed","isMine","minesNeighbors","isFlagged","onSquareClick","squareValue","squareClassName","e","rowNum","colNum","Board","boardData","gameStatus","initializeBoardData","newBoardData","row","push","col","setRandomMines","setNeighborsMinesSum","i","rowRandomIndex","Math","floor","random","colRandomIndex","getSquareNeighbors","squareNeighbors","mineNum","forEach","neighbor","exposeAllSquares","newRemainingFlags","map","slice","exposeEmptySquare","callStack","length","pop","isFlagsEqualMines","flagsEqualMines","handleSquareClick","shiftKey","handleShiftAndClick","handleLeftClick","alert","setGameStatusMessage","renderBoard","rowIndex","componentDidUpdate","prevProps","gameNum","Fragment","Minesweeper","handleBoardSettingsChange","newGameNum","ReactDOM","render","document","getElementById"],"mappings":"sUAAaA,G,MAAQ,CACnBC,KAAM,SACNC,KAAM,iBAGKC,EAAe,CAC1BC,WAAY,cACZC,IAAK,OACLC,KAAM,SAGKC,EAAW,CACtBH,WAAY,2BACZC,IAAK,oBACLC,KAAM,sBAGKE,EAAuB,CAClCC,OAAQ,GACRC,MAAO,GACPC,MAAO,EACPC,QAAS,GAGEC,EAAgB,CAC3BC,kBAAmB,6DACnBC,cAAe,4DAGJC,EAAoB,IACpBC,EAAU,iBACVC,EAAiB,ECqCfC,E,2MA/DbC,MAAQ,CACNC,YAAab,EAAqBC,OAClCa,WAAYd,EAAqBE,MACjCa,UAAWf,EAAqBG,O,EAGlCa,SAAW,SAAAC,GAET,SADW,aACJC,KAAKD,IAAgB,KAARA,I,EAItBE,mBAAqB,SAAAC,GACnB,IAAIC,EAASD,EAAME,OAAOC,MACtB,EAAKP,SAASK,KAChBA,EAASG,OAAOH,GAChB,EAAKI,SAAS,CAAEZ,YAAaQ,M,EAIjCK,kBAAoB,SAAAN,GAClB,IAAIO,EAAQP,EAAME,OAAOC,MACrB,EAAKP,SAASW,KAChBA,EAAQH,OAAOG,GACf,EAAKF,SAAS,CAAEX,WAAYa,M,EAIhCC,kBAAoB,SAAAR,GAClB,IAAIS,EAAQT,EAAME,OAAOC,MACrB,EAAKP,SAASa,KAChBA,EAAQL,OAAOK,GACf,EAAKJ,SAAS,CAAEV,UAAWc,M,wEAIrB,IAAD,OACP,OACE,6BACE,yBAAKC,UAAU,UACb,0CACA,2BAAOC,YAAY,SAASC,IAAI,SAASC,SAAUC,KAAKf,mBAAoBgB,KAAK,OAAOZ,MAAOW,KAAKtB,MAAMC,eAE5G,yBAAKiB,UAAU,SACb,yCACA,2BACEE,IAAI,QAAQC,SAAUC,KAAKR,kBAAmBS,KAAK,OAAOZ,MAAOW,KAAKtB,MAAME,cAEhF,yBAAKgB,UAAU,SACb,yCACA,2BACEE,IAAI,QAAQC,SAAUC,KAAKN,kBAAmBO,KAAK,OAAOZ,MAAOW,KAAKtB,MAAMG,aAEhF,yBAAKe,UAAU,WACb,4BAAQM,QAAS,kBAAM,EAAKC,MAAMC,sBAAsB,EAAK1B,MAAMC,YAAa,EAAKD,MAAME,WAAY,EAAKF,MAAMG,aAAlH,kB,GAvDYwB,a,OC0BPC,G,iNAzBbC,uBAAyB,WAAO,IACtBC,EAAW,EAAKL,MAAhBK,OACR,OAAKA,EAAOC,UAORD,EAAOE,OAAe,CAACpD,EAAME,KAAM,sBACT,IAA1BgD,EAAOG,eAA6B,CAAC,IAAK,yBACvC,CAACH,EAAOG,eAAgB,gCARzBH,EAAOI,UACF,CAACtD,EAAMC,KAAM,yBAEb,CAAC,IAAK,W,wEAQT,IAAD,EAC2ByC,KAAKG,MAA/BK,EADD,EACCA,OAAQK,EADT,EACSA,cADT,EAEgCb,KAAKO,yBAFrC,mBAEAO,EAFA,KAEaC,EAFb,KAGP,OACE,4BAAQnB,UAAWmB,EAAiBb,QAAS,SAAAc,GAAC,OAAIH,EAAcG,EAAGR,EAAOS,OAAQT,EAAOU,UACtFJ,O,GApBYT,cCmQNc,G,kBA3Pb,WAAYhB,GAAQ,IAAD,uBACjB,4CAAMA,KAPRzB,MAAQ,CACN0C,UAAW,GACX5C,eAAgBA,EAChB6C,WAAY5D,EAAaC,YAGR,EAOnB4D,oBAAsB,SAACnC,EAAQM,EAAOE,GAEpC,IADA,IAAI4B,EAAe,GACVC,EAAM,EAAGA,EAAMrC,EAAQqC,IAAO,CACrCD,EAAaE,KAAK,IAClB,IAAK,IAAIC,EAAM,EAAGA,EAAMjC,EAAOiC,IAC7BH,EAAaC,GAAKC,KAAK,CACrBR,OAAQO,EACRN,OAAQQ,EACRjB,WAAW,EACXG,WAAW,EACXF,QAAQ,EACRC,eAAgB,IAMtB,OAFA,EAAKgB,eAAeJ,EAAc5B,EAAOR,EAAQM,GACjD,EAAKmC,qBAAqBL,EAAcpC,EAAQM,GACzC8B,GAxBU,EA2BnBI,eAAiB,SAACP,EAAWzB,EAAOR,EAAQM,GAE1C,IADA,IAAM8B,EAAeH,EACZS,EAAI,EAAGA,EAAIlC,EAAOkC,IAAK,CAC9B,IAAMC,EAAiBC,KAAKC,MAAMD,KAAKE,SAAW9C,GAC5C+C,EAAiBH,KAAKC,MAAMD,KAAKE,SAAWxC,GAC9C8B,EAAaO,GAAgBI,GAAgBxB,OAC/CmB,IAEAN,EAAaO,GAAgBI,GAAgBxB,QAAS,EAG1D,OAAOa,GAtCU,EAyCnBY,mBAAqB,SAACX,EAAKE,EAAKN,EAAWjC,EAAQM,GACjD,IAAM2C,EAAkB,GAiBxB,OAhBIZ,EAAM,GAAK,GACbY,EAAgBX,KAAKL,EAAUI,EAAM,GAAGE,IACtCF,EAAM,EAAIrC,GACZiD,EAAgBX,KAAKL,EAAUI,EAAM,GAAGE,IACtCA,EAAM,EAAIjC,GACZ2C,EAAgBX,KAAKL,EAAUI,GAAKE,EAAM,IACxCA,EAAM,GAAK,GACbU,EAAgBX,KAAKL,EAAUI,GAAKE,EAAM,IACxCF,EAAM,GAAK,GAAKE,EAAM,EAAIjC,GAC5B2C,EAAgBX,KAAKL,EAAUI,EAAM,GAAGE,EAAM,IAC5CF,EAAM,GAAK,GAAKE,EAAM,GAAK,GAC7BU,EAAgBX,KAAKL,EAAUI,EAAM,GAAGE,EAAM,IAC5CF,EAAM,EAAIrC,GAAUuC,EAAM,EAAIjC,GAChC2C,EAAgBX,KAAKL,EAAUI,EAAM,GAAGE,EAAM,IAC5CF,EAAM,EAAIrC,GAAUuC,EAAM,GAAK,GACjCU,EAAgBX,KAAKL,EAAUI,EAAM,GAAGE,EAAM,IACzCU,GA3DU,EA8DnBR,qBAAuB,SAACR,EAAWjC,EAAQM,GACzC,IAAK,IAAI+B,EAAM,EAAGA,EAAMrC,EAAQqC,IAC9B,IAAK,IAAIE,EAAM,EAAGA,EAAMjC,EAAOiC,IAAO,EAEV,IADPN,EAAUI,GAAKE,GACnBhB,QAAmB,WAChC,IAAI2B,EAAU,EACU,EAAKF,mBAAmBX,EAAKE,EAAKN,EAAWjC,EAAQM,GAC7D6C,SAAQ,SAAAC,GAClBA,EAAS7B,QACX2B,OAEJjB,EAAUI,GAAKE,GAAKf,eAAiB0B,EAPL,GAWtC,OAAOjB,GA7EU,EAgFnBoB,iBAAmB,SAAAC,GAAsB,IAEjClB,EADgB,EAAK7C,MAAnB0C,UACuBsB,KAAI,SAAAlB,GAAG,OAAIA,EAAImB,WAC9CpB,EAAae,SAAQ,SAAAd,GACnBA,EAAIc,SAAQ,SAAA9B,GACVA,EAAOC,WAAY,QAGvB,EAAKlB,SAAS,CAAE6B,UAAWG,EAAc/C,eAAgBiE,KAxFxC,EAyGnBG,kBAAoB,SAACpB,EAAKE,EAAKN,GAC7B,IAAIyB,EAAY,GAEhB,IADAA,EAAUpB,KAAK,CAACD,EAAKE,IACdmB,EAAUC,OAAS,GAAG,CAC3B,IAAItC,EAASqC,EAAUE,MACC,EAAKZ,mBAAmB3B,EAAO,GAAIA,EAAO,GAAIY,EAAW,EAAKjB,MAAMhB,OAAQ,EAAKgB,MAAMV,OAC/F6C,SAAQ,SAAA9B,GACjBA,EAAOC,WAAwC,IAA1BD,EAAOG,gBAAyBH,EAAOE,QAAYF,EAAOI,YAClFQ,EAAUZ,EAAOS,QAAQT,EAAOU,QAAQT,WAAY,EACtB,IAA1BD,EAAOG,gBACTkC,EAAUpB,KAAK,CAACjB,EAAOS,OAAQT,EAAOU,aAI9C,OAAOE,GAvHU,EA0HnB4B,kBAAoB,WAAO,IACjB5B,EAAc,EAAK1C,MAAnB0C,UACJ6B,EAAkB,EAMtB,OALA7B,EAAUkB,SAAQ,SAAAd,GAChBA,EAAIc,SAAQ,SAAA9B,GACNA,EAAOI,WAAaJ,EAAOE,QAAQuC,UAGvCA,IAAoB,EAAK9C,MAAMR,OAlIlB,EAsInBuD,kBAAoB,SAAClC,EAAGQ,EAAKE,GACvBV,EAAEmC,SACJ,EAAKC,oBAAoB5B,EAAKE,GAE9B,EAAK2B,gBAAgB7B,EAAKE,IA1IX,EA8InB2B,gBAAkB,SAAC7B,EAAKE,GAAS,IAAD,EACoB,EAAKhD,MAA/C0C,EADsB,EACtBA,UAAW5C,EADW,EACXA,eAAgB6C,EADL,EACKA,WACnC,GAAID,EAAUI,GAAKE,GAAKd,WAAaQ,EAAUI,GAAKE,GAAKjB,WAAaY,IAAe5D,EAAaC,WAChG,OAAO,KAET,GAAI0D,EAAUI,GAAKE,GAAKhB,OAItB,OAHA,EAAK8B,iBAAiBhE,GAEtB,EAAKe,SAAS,CAAE8B,WAAY5D,EAAaG,KAAMY,eAAgB,IACxD,KAGT,IAAI+C,EAAeH,EAAUsB,KAAI,SAAAlB,GAAG,OAAIA,EAAImB,WAC5CpB,EAAaC,GAAKE,GAAKjB,WAAY,EACW,IAA1Cc,EAAaC,GAAKE,GAAKf,iBACzBY,EAAe,EAAKqB,kBAAkBpB,EAAKE,EAAKH,IAClD,EAAKhC,SAAS,CAAE6B,UAAWG,KA9JV,EAiKnB6B,oBAAsB,SAAC5B,EAAKE,GAAS,IAAD,EACA,EAAKhD,MAA/B0C,EAD0B,EAC1BA,UAAWC,EADe,EACfA,WACnB,GAAID,EAAUI,GAAKE,GAAKjB,WAAaY,IAAe5D,EAAaC,WAC/D,OAAO,KAHyB,IAI1Bc,EAAmB,EAAKE,MAAxBF,eACJ+C,EAAeH,EAAUsB,KAAI,SAAAlB,GAAG,OAAIA,EAAImB,WACxCF,EAAoBjE,EACxB,GAAI+C,EAAaC,GAAKE,GAAKd,UACzBW,EAAaC,GAAKE,GAAKd,WAAY,EACnC6B,QACK,CACL,GAAuB,IAAnBjE,EAEF,OADA8E,MAAM/E,GACC,KAET,KAAIkE,EAAoB,GAajB,OAAO,KAVZ,GAFAlB,EAAaC,GAAKE,GAAKd,WAAY,EAET,MAD1B6B,GAEM,EAAKO,oBAMP,OAJA,EAAKzD,SAAS,CACZ8B,WAAY5D,EAAaE,IACzBa,eAAgBiE,IAEX,KAKf,EAAKlD,SAAS,CACZ6B,UAAWG,EACX/C,eAAgBiE,KAjMD,EAqMnBc,qBAAuB,SAAAlC,GACrB,OAAIA,IAAe5D,EAAaE,IACvBE,EAASF,IACP0D,IAAe5D,EAAaG,KAC9BC,EAASD,KAEXC,EAASH,YA3MC,EA8MnB8F,YAAc,SAAApC,GACZ,OACE,yBAAKxB,UAAU,SACZwB,EAAUsB,KAAI,SAAClB,EAAKiC,GAAN,OACb,yBAAK3D,IAAK,MAAQ2D,EAAU7D,UAAU,OACnC4B,EAAIkB,KAAI,SAAAlC,GAAM,OACb,kBAAC,EAAD,CACEV,IAAK0B,EAAIsB,OAAStC,EAAOS,OAAST,EAAOU,OACzCV,OAAQA,EACRK,cAAe,SAAAG,GAAC,OACd,EAAKkC,kBAAkBlC,EAAGR,EAAOS,OAAQT,EAAOU,oBAxN7C,EAkOnBwC,mBAAqB,SAAAC,GAAa,MAEU,EAAKxD,MAAvChB,EAFwB,EAExBA,OAAQM,EAFgB,EAEhBA,MAAOE,EAFS,EAETA,MAAOiE,EAFE,EAEFA,QAC9B,GAAIzE,IAAWwE,EAAUxE,QAAUM,IAAUkE,EAAUlE,OAASE,IAAUgE,EAAUhE,OAASiE,IAAYD,EAAUC,QAAS,CAC1H,IAAMrC,EAAe,EAAKD,oBAAoBnC,EAAQM,EAAOE,GAC7D,EAAKJ,SAAS,CAAE6B,UAAWG,EAAc/C,eAAgBmB,EAAO0B,WAAY5D,EAAaC,eAvO1E,IAETyB,EAAyBgB,EAAzBhB,OAAQM,EAAiBU,EAAjBV,MAAOE,EAAUQ,EAAVR,MAFN,OAGjB,EAAKjB,MAAMF,eAAiBmB,EAC5B,EAAKjB,MAAM0C,UAAY,EAAKE,oBAAoBnC,EAAQM,EAAOE,GAJ9C,E,sEA2OT,IAAD,EAC2CK,KAAKtB,MAA/C0C,EADD,EACCA,UAAWC,EADZ,EACYA,WAAY7C,EADxB,EACwBA,eAC/B,OACE,kBAAC,IAAMqF,SAAP,KACE,0BAAMjE,UAAU,kBAAhB,oBACmB,0BAAMA,UAAU,SAASpB,EAAzB,MAEnB,0BAAMoB,UAAU,UAAhB,gBACgBI,KAAKuD,qBAAqBlC,GAAa,KAEtDrB,KAAKwD,YAAYpC,Q,GA5PNf,cCiCLyD,G,iNA/BbpF,MAAQ,CACNS,OAAQrB,EAAqBC,OAC7B0B,MAAO3B,EAAqBE,MAC5B2B,MAAO7B,EAAqBG,MAC5B2F,QAAS9F,EAAqBI,S,EAGhC6F,0BAA4B,SAAC5E,EAAQM,EAAOE,GAC1C,IAAIqE,EAAa,EAAKtF,MAAMkF,QAAU,EACtC,OAAIzE,GAAU,GAAKM,GAAS,GAAKE,EAAQ,GAAKF,EAAQnB,GAAqBa,EAASb,GAClFgF,MAAMnF,EAAcC,mBACb,MAELuB,EAAQR,EAASM,GAAmB,IAAVE,GAC5B2D,MAAMnF,EAAcE,eACb,WAET,EAAKkB,SAAS,CAAEJ,OAAQA,EAAQM,MAAOA,EAAOE,MAAOA,EAAOiE,QAASI,K,wEAG7D,IAAD,EACmChE,KAAKtB,MAAvCS,EADD,EACCA,OAAQM,EADT,EACSA,MAAOE,EADhB,EACgBA,MAAOiE,EADvB,EACuBA,QAC9B,OACE,yBAAKhE,UAAU,QACb,kBAAC,EAAD,CAASQ,sBAAuBJ,KAAK+D,4BACrC,kBAAC,EAAD,CAAO5E,OAAQA,EAAQM,MAAOA,EAAOE,MAAOA,EAAOiE,QAASA,S,GA1B1CvD,cCD1B4D,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,W","file":"static/js/main.ee5e8440.chunk.js","sourcesContent":["export const icons = {\r\n  FLAG: \"âš‘\",\r\n  BOMB: \"ðŸ’£\"\r\n};\r\n\r\nexport const gameStatuses = {\r\n  INPROGRESS: \"In progress\",\r\n  WIN: \"Win!\",\r\n  LOSE: \"Lose!\"\r\n};\r\n\r\nexport const messages = {\r\n  INPROGRESS: \"In progress ðŸ’£\",\r\n  WIN: \"Win! ðŸš©\",\r\n  LOSE: \"Lose! ðŸ”¥\"\r\n};\r\n\r\nexport const initialBoardSettings = {\r\n  HEIGHT: 10,\r\n  WIDTH: 10,\r\n  MINES: 5,\r\n  GAMENUM: 0\r\n};\r\n\r\nexport const errorMessages = {\r\n  INVALID_DIMENSION: \"Invalid input! Width and height should be in range [1-300]\",\r\n  INVALID_MINES: \"Number of mines should be in range [1 - board dimension]\"\r\n};\r\n\r\nexport const maxBoardDimension = 300;\r\nexport const noFlags = \"No more flags!\";\r\nexport const remainingFlags = 0;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Toolbar.css\";\r\nimport { initialBoardSettings } from \"../globConstants/globConstants\";\r\n\r\nclass Toolbar extends Component {\r\n  state = {\r\n    heightInput: initialBoardSettings.HEIGHT,\r\n    widthInput: initialBoardSettings.WIDTH,\r\n    mineInput: initialBoardSettings.MINES\r\n  };\r\n\r\n  isNumber = val => {\r\n    const re = /^[0-9\\b]+$/;\r\n    if (re.test(val) || val === \"\") return true;\r\n    return false;\r\n  };\r\n\r\n  handleHeightChange = input => {\r\n    let height = input.target.value;\r\n    if (this.isNumber(height)) {\r\n      height = Number(height);\r\n      this.setState({ heightInput: height });\r\n    }\r\n  };\r\n\r\n  handlewidthChange = input => {\r\n    let width = input.target.value;\r\n    if (this.isNumber(width)) {\r\n      width = Number(width);\r\n      this.setState({ widthInput: width });\r\n    }\r\n  };\r\n\r\n  handleMinesChange = input => {\r\n    let mines = input.target.value;\r\n    if (this.isNumber(mines)) {\r\n      mines = Number(mines);\r\n      this.setState({ mineInput: mines });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"Height\">\r\n          <label>Height:</label>\r\n          <input placeholder=\"Height\" key=\"height\" onChange={this.handleHeightChange} type=\"text\" value={this.state.heightInput}></input>\r\n        </div>\r\n        <div className=\"Width\">\r\n          <label>Width:</label>\r\n          <input\r\n            key=\"width\" onChange={this.handlewidthChange} type=\"text\" value={this.state.widthInput}></input>\r\n        </div>\r\n        <div className=\"Mines\">\r\n          <label>Mines:</label>\r\n          <input\r\n            key=\"mines\" onChange={this.handleMinesChange} type=\"text\" value={this.state.mineInput}></input>\r\n        </div>\r\n        <div className=\"newGame\">\r\n          <button onClick={() => this.props.onBoardSettingsChange(this.state.heightInput, this.state.widthInput, this.state.mineInput)}>\r\n            New Game\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Toolbar;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Square.css\";\r\nimport { icons } from \"../globConstants/globConstants\";\r\n\r\nclass Square extends Component {\r\n  getSquareValueAndClass = () => {\r\n    const { square } = this.props;\r\n    if (!square.isExposed) {\r\n      if (square.isFlagged) {\r\n        return [icons.FLAG, \"square square-flagged\"];\r\n      } else {\r\n        return [\".\", \"square\"];\r\n      }\r\n    }\r\n    if (square.isMine) return [icons.BOMB, \"square square-boom\"];\r\n    if (square.minesNeighbors === 0) return [\".\", \"square square-exposed\"];\r\n    return [square.minesNeighbors, \"square square-exposed-number\"];\r\n  };\r\n\r\n  render() {\r\n    const { square, onSquareClick } = this.props;\r\n    const [squareValue, squareClassName] = this.getSquareValueAndClass();\r\n    return (\r\n      <button className={squareClassName} onClick={e => onSquareClick(e, square.rowNum, square.colNum)}>\r\n        {squareValue}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./Square\";\r\nimport \"../styles/Board.css\";\r\nimport { gameStatuses, noFlags, remainingFlags, messages } from \"../globConstants/globConstants\";\r\n\r\nclass Board extends Component {\r\n  state = {\r\n    boardData: [],\r\n    remainingFlags: remainingFlags,\r\n    gameStatus: gameStatuses.INPROGRESS\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const { height, width, mines } = props;\r\n    this.state.remainingFlags = mines;\r\n    this.state.boardData = this.initializeBoardData(height, width, mines);\r\n  }\r\n\r\n  initializeBoardData = (height, width, mines) => {\r\n    let newBoardData = [];\r\n    for (let row = 0; row < height; row++) {\r\n      newBoardData.push([]);\r\n      for (let col = 0; col < width; col++) {\r\n        newBoardData[row].push({\r\n          rowNum: row,\r\n          colNum: col,\r\n          isExposed: false,\r\n          isFlagged: false,\r\n          isMine: false,\r\n          minesNeighbors: 0\r\n        });\r\n      }\r\n    }\r\n    this.setRandomMines(newBoardData, mines, height, width);\r\n    this.setNeighborsMinesSum(newBoardData, height, width);\r\n    return newBoardData;\r\n  };\r\n\r\n  setRandomMines = (boardData, mines, height, width) => {\r\n    const newBoardData = boardData;\r\n    for (let i = 0; i < mines; i++) {\r\n      const rowRandomIndex = Math.floor(Math.random() * height);\r\n      const colRandomIndex = Math.floor(Math.random() * width);\r\n      if (newBoardData[rowRandomIndex][colRandomIndex].isMine) {\r\n        i--;\r\n      } else {\r\n        newBoardData[rowRandomIndex][colRandomIndex].isMine = true;\r\n      }\r\n    }\r\n    return newBoardData;\r\n  };\r\n\r\n  getSquareNeighbors = (row, col, boardData, height, width) => {\r\n    const squareNeighbors = [];\r\n    if (row - 1 >= 0) \r\n      squareNeighbors.push(boardData[row - 1][col]);\r\n    if (row + 1 < height)\r\n      squareNeighbors.push(boardData[row + 1][col]);\r\n    if (col + 1 < width)\r\n      squareNeighbors.push(boardData[row][col + 1]);\r\n    if (col - 1 >= 0)\r\n      squareNeighbors.push(boardData[row][col - 1]);\r\n    if (row - 1 >= 0 && col + 1 < width)\r\n      squareNeighbors.push(boardData[row - 1][col + 1]);\r\n    if (row - 1 >= 0 && col - 1 >= 0)\r\n      squareNeighbors.push(boardData[row - 1][col - 1]);\r\n    if (row + 1 < height && col + 1 < width)\r\n      squareNeighbors.push(boardData[row + 1][col + 1]);\r\n    if (row + 1 < height && col - 1 >= 0)\r\n      squareNeighbors.push(boardData[row + 1][col - 1]);\r\n    return squareNeighbors;\r\n  };\r\n\r\n  setNeighborsMinesSum = (boardData, height, width) => {\r\n    for (let row = 0; row < height; row++) {\r\n      for (let col = 0; col < width; col++) {\r\n        const squareData = boardData[row][col];\r\n        if (squareData.isMine === false) {\r\n          let mineNum = 0;\r\n          const squareNeighbors = this.getSquareNeighbors(row, col, boardData, height, width);\r\n          squareNeighbors.forEach(neighbor => {\r\n            if (neighbor.isMine)\r\n              mineNum++;\r\n          });\r\n          boardData[row][col].minesNeighbors = mineNum;\r\n        }\r\n      }\r\n    }\r\n    return boardData;\r\n  };\r\n\r\n  exposeAllSquares = newRemainingFlags => {\r\n    const { boardData } = this.state;\r\n    const newBoardData = boardData.map(row => row.slice());\r\n    newBoardData.forEach(row => {\r\n      row.forEach(square => {\r\n        square.isExposed = true;\r\n      });\r\n    });\r\n    this.setState({ boardData: newBoardData, remainingFlags: newRemainingFlags });\r\n  };\r\n\r\n  // Recursive implementation\r\n  // exposeEmptySquare = (row, col, boardData) => {\r\n  //   const squareNeighbors = this.getSquareNeighbors(row, col, boardData, this.props.height, this.props.width);\r\n  //   squareNeighbors.forEach(square => {\r\n  //     if (!square.isExposed && (square.minesNeighbors === 0 || !square.isMine) && !square.isFlagged) {\r\n  //       boardData[square.rowNum][square.colNum].isExposed = true;\r\n  //       if (square.minesNeighbors === 0)\r\n  //         this.exposeEmptySquare(square.rowNum, square.colNum, boardData);\r\n  //     }\r\n  //   });\r\n  //   return boardData;\r\n  // };\r\n\r\n  // Iterative implementation\r\n  exposeEmptySquare = (row, col, boardData) => {\r\n    let callStack = [];\r\n    callStack.push([row, col]);\r\n    while (callStack.length > 0) {\r\n      let square = callStack.pop();\r\n      const squareNeighbors = this.getSquareNeighbors(square[0], square[1], boardData, this.props.height, this.props.width);\r\n      squareNeighbors.forEach(square => {\r\n        if (!square.isExposed && (square.minesNeighbors === 0 || !square.isMine) && !square.isFlagged) {\r\n          boardData[square.rowNum][square.colNum].isExposed = true;\r\n          if (square.minesNeighbors === 0)\r\n            callStack.push([square.rowNum, square.colNum]);\r\n        }\r\n      });\r\n    }\r\n    return boardData;\r\n  };\r\n\r\n  isFlagsEqualMines = () => {\r\n    const { boardData } = this.state;\r\n    let flagsEqualMines = 0;\r\n    boardData.forEach(row => {\r\n      row.forEach(square => {\r\n        if (square.isFlagged && square.isMine) flagsEqualMines++;\r\n      });\r\n    });\r\n    if (flagsEqualMines === this.props.mines) return true;\r\n    return false;\r\n  };\r\n\r\n  handleSquareClick = (e, row, col) => {\r\n    if (e.shiftKey) {\r\n      this.handleShiftAndClick(row, col);\r\n    } else {\r\n      this.handleLeftClick(row, col);\r\n    }\r\n  };\r\n\r\n  handleLeftClick = (row, col) => {\r\n    const { boardData, remainingFlags, gameStatus } = this.state;\r\n    if (boardData[row][col].isFlagged || boardData[row][col].isExposed || gameStatus !== gameStatuses.INPROGRESS)\r\n      return null;\r\n\r\n    if (boardData[row][col].isMine) {\r\n      this.exposeAllSquares(remainingFlags);\r\n      //alert(gameStatuses.LOSE);\r\n      this.setState({ gameStatus: gameStatuses.LOSE, remainingFlags: 0 });\r\n      return null;\r\n    }\r\n\r\n    let newBoardData = boardData.map(row => row.slice());\r\n    newBoardData[row][col].isExposed = true;\r\n    if (newBoardData[row][col].minesNeighbors === 0)\r\n      newBoardData = this.exposeEmptySquare(row, col, newBoardData);\r\n    this.setState({ boardData: newBoardData });\r\n  };\r\n\r\n  handleShiftAndClick = (row, col) => {\r\n    const { boardData, gameStatus } = this.state;\r\n    if (boardData[row][col].isExposed || gameStatus !== gameStatuses.INPROGRESS)\r\n      return null;\r\n    const { remainingFlags } = this.state;\r\n    let newBoardData = boardData.map(row => row.slice());\r\n    let newRemainingFlags = remainingFlags;\r\n    if (newBoardData[row][col].isFlagged) {\r\n      newBoardData[row][col].isFlagged = false;\r\n      newRemainingFlags++;\r\n    } else {\r\n      if (remainingFlags === 0) {\r\n        alert(noFlags);\r\n        return null;\r\n      }\r\n      if (newRemainingFlags > 0) {\r\n        newBoardData[row][col].isFlagged = true;\r\n        newRemainingFlags--;\r\n        if (newRemainingFlags === 0) {\r\n          if (this.isFlagsEqualMines()) {\r\n            //alert(gameStatuses.WIN);\r\n            this.setState({\r\n              gameStatus: gameStatuses.WIN,\r\n              remainingFlags: newRemainingFlags\r\n            });\r\n            return null;\r\n          }\r\n        }\r\n      } else return null;\r\n    }\r\n    this.setState({\r\n      boardData: newBoardData,\r\n      remainingFlags: newRemainingFlags\r\n    });\r\n  };\r\n\r\n  setGameStatusMessage = gameStatus => {\r\n    if (gameStatus === gameStatuses.WIN) {\r\n      return messages.WIN;\r\n    } else if (gameStatus === gameStatuses.LOSE) {\r\n      return messages.LOSE;\r\n    }\r\n    return messages.INPROGRESS;\r\n  };\r\n\r\n  renderBoard = boardData => {\r\n    return (\r\n      <div className=\"board\">\r\n        {boardData.map((row, rowIndex) => (\r\n          <div key={\"row\" + rowIndex} className=\"row\">\r\n            {row.map(square => (\r\n              <Square\r\n                key={row.length * square.rowNum + square.colNum}\r\n                square={square}\r\n                onSquareClick={e =>\r\n                  this.handleSquareClick(e, square.rowNum, square.colNum)\r\n                }\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  componentDidUpdate = prevProps => {\r\n    // updateing board settings when props are changing\r\n    const { height, width, mines, gameNum } = this.props;\r\n    if (height !== prevProps.height || width !== prevProps.width || mines !== prevProps.mines || gameNum !== prevProps.gameNum) {\r\n      const newBoardData = this.initializeBoardData(height, width, mines);\r\n      this.setState({ boardData: newBoardData, remainingFlags: mines, gameStatus: gameStatuses.INPROGRESS });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { boardData, gameStatus, remainingFlags } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <span className=\"remainingFlags\">\r\n          Remaining flags: <span className=\"flags\">{remainingFlags} </span>\r\n        </span>\r\n        <span className=\"status\">\r\n          Game status: {this.setGameStatusMessage(gameStatus)}{\" \"}\r\n        </span>\r\n        {this.renderBoard(boardData)}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\nimport Toolbar from \"./components/Toolbar\";\nimport Board from \"./components/Board\";\nimport \"./styles/Minesweeper.css\";\nimport { initialBoardSettings, errorMessages, maxBoardDimension } from \"./globConstants/globConstants\";\n\nclass Minesweeper extends Component {\n  state = {\n    height: initialBoardSettings.HEIGHT,\n    width: initialBoardSettings.WIDTH,\n    mines: initialBoardSettings.MINES,\n    gameNum: initialBoardSettings.GAMENUM\n  };\n\n  handleBoardSettingsChange = (height, width, mines) => {\n    let newGameNum = this.state.gameNum + 1;\n    if (height <= 0 || width <= 0 || mines < 0 || width > maxBoardDimension || height > maxBoardDimension) {\n      alert(errorMessages.INVALID_DIMENSION);\n      return null;\n    }\n    if (mines > height * width || mines === 0) {\n      alert(errorMessages.INVALID_MINES);\n      return null;\n    }\n    this.setState({ height: height, width: width, mines: mines, gameNum: newGameNum });\n  };\n\n  render() {\n    const { height, width, mines, gameNum } = this.state;\n    return (\n      <div className=\"root\">\n        <Toolbar onBoardSettingsChange={this.handleBoardSettingsChange} />\n        <Board height={height} width={width} mines={mines} gameNum={gameNum} />\n      </div>\n    );\n  }\n}\n\nexport default Minesweeper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Minesweeper from \"./Minesweeper\";\n\nReactDOM.render(<Minesweeper />, document.getElementById(\"root\"));\n"],"sourceRoot":""}